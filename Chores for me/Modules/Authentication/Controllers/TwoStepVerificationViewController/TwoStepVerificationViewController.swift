//
//  TwoStepVerificationViewController.swift
//  Chores for me
//
//  Created by Chores for me 2019 on 14/04/21.
//

import UIKit
import Designable
import NVActivityIndicatorView
import Toast_Swift

class TwoStepVerificationViewController: ServiceBaseViewController {


    // MARK: - Outlets
    @IBOutlet weak var enterVerficationCodeText: UILabel!
    @IBOutlet weak var verificationTextField: UITextField!
    @IBOutlet weak private var toggalButton: DesignableButton!
    @IBOutlet weak private var otpCountLabel: UILabel!
    @IBOutlet weak private var otpHasBeenSentLabel: UILabel!
    @IBOutlet weak private var backButton: UIButton!
    @IBOutlet weak private var resendButton: UIButton!


    // MARK: - Properties
    var otpFeild: Int?
    var otpTimer = Timer()
    var totalTime = 31


    // MARK: - Lifecycle


    // MARK: - View Lifecycle
    override func viewDidLoad() {
        super.viewDidLoad()
        self.otpHasBeenSentLabel.layer.cornerRadius = 15.0
        let image = UIImage(named: "BACK")?.withRenderingMode(.alwaysTemplate)
        backButton.setImage(image, for: .normal)
        backButton.tintColor = .white
        let last = UserStoreSingleton.shared.phoneNumber
               let last4 = String(last?.suffix(2) ?? "")
        enterVerficationCodeText.text = "Enter the verification code generated by your phone ends with +x xxx xxx xx\(last4)."
        resendButton.setTitle("Click in ", for: .normal)
        otpTimer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateTimer), userInfo: nil, repeats: true)
//        sendOtp()
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            self.otpHasBeenSentLabel.layer.cornerRadius = 15.0
            self.otpHasBeenSentLabel.isHidden = true
        }
    }

    override func viewWillAppear(_ animated: Bool) {
        navigationController?.navigationBar.isHidden = true
    }

    // MARK: - Layout

     
    // MARK: - User Interaction
    @IBAction func continueButtonAction(_ sender: Any) {
        OTPVerificationApi()
       // navigate(.allowLocation)
    }

    @IBAction func resendButtonAction(_ sender: Any) {
        otpTimer = Timer.scheduledTimer(timeInterval: 1, target: self, selector: #selector(updateTimer), userInfo: nil, repeats: true)
        otpCountLabel.isHidden = false
        resendButton.setTitle("Click in", for: .normal)
        totalTime = 31
        sendOtp()
        otpHasBeenSentLabel.isHidden = false
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.0) {
            self.otpHasBeenSentLabel.layer.cornerRadius = 15.0
            self.otpHasBeenSentLabel.isHidden = true
        }
    }

    @IBAction func toggalButtonAction(_ sender: UIButton) {
        toggalButton.isSelected.toggle()
    }

    @IBAction func backButtonAction(_ sender: UIButton) {
        navigationController?.popViewController(animated: true)
    }

    @objc func updateTimer() {
        if(totalTime > 0) {
                totalTime = totalTime - 1
                print(totalTime)
                otpCountLabel.text = String(totalTime)
            resendButton.setTitle("Click in", for: .normal)
            resendButton.isEnabled = false
        }
        else {
            otpCountLabel.isHidden = true
            resendButton.setTitle("Click Here", for: .normal)
            resendButton.isEnabled = true
            otpTimer.invalidate()
        }

    }

    // MARK: - Additional Helpers
    func OTPVerificationApi() {
        self.showActivity()
            let Url = String(format: "http://3.18.59.239:3000/api/v1/verifyOTP")
                guard let serviceUrl = URL(string: Url) else { return }
        let phoneNumber = "\(UserStoreSingleton.shared.DialCode ?? "")\(UserStoreSingleton.shared.phoneNumber ?? "")"
        //\(UserStoreSingleton.shared.DialCode ?? "")
        let parameterDictionary =  ["OTP": verificationTextField.text  ?? "" ,"phone" :  phoneNumber, "signupType": "0"] as [String: Any]
                var request = URLRequest(url: serviceUrl)
                request.httpMethod = "POST"
                request.setValue("Application/json", forHTTPHeaderField: "Content-Type")
                guard let httpBody = try? JSONSerialization.data(withJSONObject: parameterDictionary, options: []) else {
                    return
                }
                request.httpBody = httpBody
                let session = URLSession.shared
                session.dataTask(with: request) { (data, response, error) in
                    guard let data = data else { return }
                    do {
                        let gitData = try JSONDecoder().decode(VerifyOtpModel.self, from: data)
                        print("response data:", gitData)
                        self.hideActivity()
                        DispatchQueue.main.async {
                            if gitData.status == 200 {
                                let token = gitData.data?.token
                                UserStoreSingleton.shared.Token = token
                                UserStoreSingleton.shared.isLoggedIn = true
                                LogoutViewController.tokenForPresentedLogout = token
                                self.showMessage(gitData.message ?? "")
                                self.callingGetUserprofileAPI()
                                self.hideActivity()
                                self.navigate(.allowLocation)
                            }
                            else {
                                self.hideActivity()
                                self.showMessage(gitData.message ?? "")
                            }
                        }
                    } catch let err {
                        self.hideActivity()
                        print("Err", err)
                        print("Not Logedin")
                    }
                }.resume()
        
                }

        func sendOtp(){
            showActivity()
                guard let gitUrl = URL(string:"http://3.18.59.239:3000/api/v1/sendOtp") else { return }
                print(gitUrl)
                let request = NSMutableURLRequest(url: gitUrl)
            let phoneNumber = "\(UserStoreSingleton.shared.DialCode ?? "")\(UserStoreSingleton.shared.phoneNumber ?? "")"
            let parameters = ["phone": phoneNumber,"signupType": "0"]
                let session = URLSession.shared
                request.httpMethod = "POST"
                request.addValue("application/json", forHTTPHeaderField: "Content-Type")
                request.addValue("application/json", forHTTPHeaderField: "Accept")
                request.httpBody = try! JSONSerialization.data(withJSONObject: parameters, options: [])
            session.dataTask(with: request as URLRequest) { [self] data, response, error in
                    guard let data = data else { return }
                    do {
                        let gitData = try JSONDecoder().decode(SendOtpModel.self, from: data)
                        hideActivity()
                        print("response data:", gitData)
                        DispatchQueue.main.async {
                            hideActivity()
                            UserStoreSingleton.shared.OtpCode = gitData.data?.oTP
//                            verificationTextField.text = getOtp
                        }
                    } catch let err {
                        print("Err", err)
                        print("Not Logedin")
                    }
                }.resume()
        }

    private func callingGetUserprofileAPI() {
        self.showActivity()
            var request = URLRequest(url: URL(string: "http://3.18.59.239:3000/api/v1/get-user-Profile")!,timeoutInterval: Double.infinity)
            request.addValue("\(UserStoreSingleton.shared.Token ?? "")", forHTTPHeaderField:"Authorization")
            request.httpMethod = "GET"
            let task = URLSession.shared.dataTask(with: request) { data, response, error in
                self.hideActivity()
                do {
                    let json =  try JSONDecoder().decode(SetUpProfile.self, from: data ?? Data())
                    debugPrint(json)
                    DispatchQueue.main.async {
                        UserStoreSingleton.shared.name = json.data?.first_name
                        UserStoreSingleton.shared.userID = json.data?.userId
                        if json.data?.image != nil {
                            UserStoreSingleton.shared.profileImage = json.data?.image
                        }
                    }
                } catch {
                    print(error)
                    self.hideActivity()
                }
            }
            task.resume()
        }
   

}

